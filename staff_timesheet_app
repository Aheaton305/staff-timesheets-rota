<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Staffing App</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
            justify-content: center;
            align-items: center;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen p-6 md:p-10">

    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged, OAuthProvider, signInWithPopup, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, collection, addDoc, onSnapshot, setDoc, getDocs, query, where, updateDoc, Timestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        setLogLevel('Debug');

        // Global variables provided by the environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let db, auth, userId, currentHome = null;
        let unsubscribeRotas = null;
        let unsubscribeTimesheets = null;

        function showMessage(message) {
            const modal = document.getElementById('messageModal');
            const modalMessage = document.getElementById('modalMessage');
            modalMessage.textContent = message;
            modal.style.display = 'flex';
            setTimeout(() => {
                modal.style.display = 'none';
            }, 3000);
        }

        async function initFirebase() {
            try {
                const app = initializeApp(firebaseConfig);
                auth = getAuth(app);
                db = getFirestore(app);

                onAuthStateChanged(auth, async (user) => {
                    const contentArea = document.getElementById('mainContent');
                    const loginScreen = document.getElementById('loginScreen');

                    if (user) {
                        userId = user.uid;
                        document.getElementById('userIdDisplay').textContent = `User ID: ${userId}`;
                        console.log("Firebase initialized and user authenticated:", userId);
                        loginScreen.classList.add('hidden');
                        contentArea.classList.remove('hidden');
                        attachListeners();
                    } else {
                        userId = null;
                        document.getElementById('userIdDisplay').textContent = '';
                        loginScreen.classList.remove('hidden');
                        contentArea.classList.add('hidden');
                        console.log("User not authenticated.");
                    }
                });

                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                }
            } catch (error) {
                console.error("Error initializing Firebase:", error);
                showMessage("Failed to connect to the database. Please check your connection.");
            }
        }

        async function signInWithMicrosoft() {
            const provider = new OAuthProvider('microsoft.com');
            try {
                await signInWithPopup(auth, provider);
            } catch (error) {
                console.error("Error during Microsoft sign-in:", error);
                showMessage("Microsoft sign-in failed. Please try again.");
            }
        }

        async function handleSignOut() {
            try {
                await signOut(auth);
                showMessage("You have been signed out.");
            } catch (error) {
                console.error("Error during sign-out:", error);
                showMessage("Sign out failed. Please try again.");
            }
        }

        // Initialize Firebase on page load
        window.onload = initFirebase;

        function attachListeners() {
            document.getElementById('addRotaForm').addEventListener('submit', handleAddRota);
            document.getElementById('signInForm').addEventListener('submit', handleSignIn);
            document.getElementById('editForm').addEventListener('submit', handleEditFormSubmit);
            document.getElementById('closeEditModal').addEventListener('click', () => {
                document.getElementById('editModal').style.display = 'none';
            });
            document.getElementById('filterDate').addEventListener('change', compareData);
            document.getElementById('signOutButton').addEventListener('click', handleSignOut);
            document.getElementById('addTestDataButton').addEventListener('click', addTestData);
            document.getElementById('homeSelect').addEventListener('change', (e) => {
                currentHome = e.target.value;
                if (currentHome) {
                    loadDataForHome();
                } else {
                    document.getElementById('rotaList').innerHTML = '<p class="text-gray-500">Please select a home.</p>';
                    document.getElementById('timesheetList').innerHTML = '<p class="text-gray-500">Please select a home.</p>';
                    document.getElementById('comparisonList').innerHTML = '<p class="text-gray-500">Please select a home.</p>';
                    document.getElementById('staffReportList').innerHTML = '<p class="text-gray-500">Please select a home.</p>';
                }
            });

            // Set initial state
            currentHome = document.getElementById('homeSelect').value;
            if (currentHome) {
                loadDataForHome();
            } else {
                document.getElementById('rotaList').innerHTML = '<p class="text-gray-500">Please select a home.</p>';
                document.getElementById('timesheetList').innerHTML = '<p class="text-gray-500">Please select a home.</p>';
                document.getElementById('comparisonList').innerHTML = '<p class="text-gray-500">Please select a home.</p>';
                document.getElementById('staffReportList').innerHTML = '<p class="text-gray-500">Please select a home.</p>';
            }
        }
        
        function loadDataForHome() {
            // Unsubscribe from previous listeners
            if (unsubscribeRotas) unsubscribeRotas();
            if (unsubscribeTimesheets) unsubscribeTimesheets();
            
            const rotasQuery = query(collection(db, `/artifacts/${appId}/public/data/rotas`), where("home", "==", currentHome));
            const timesheetsQuery = query(collection(db, `/artifacts/${appId}/public/data/timesheets`), where("home", "==", currentHome));

            unsubscribeRotas = onSnapshot(rotasQuery, (snapshot) => {
                const rotas = [];
                snapshot.forEach(doc => {
                    rotas.push({ id: doc.id, ...doc.data() });
                });
                displayRotas(rotas);
                compareData();
            });

            unsubscribeTimesheets = onSnapshot(timesheetsQuery, (snapshot) => {
                const timesheets = [];
                snapshot.forEach(doc => {
                    timesheets.push({ id: doc.id, ...doc.data() });
                });
                displayTimesheets(timesheets);
                compareData();
                generateStaffReport();
            });
        }

        async function handleAddRota(event) {
            event.preventDefault();
            const name = document.getElementById('rotaName').value;
            const category = document.getElementById('rotaCategory').value;
            const date = document.getElementById('rotaDate').value;
            const startTime = document.getElementById('rotaStartTime').value;
            const endTime = document.getElementById('rotaEndTime').value;
            const home = document.getElementById('homeSelect').value;

            if (!home || !name || !category || !date || !startTime || !endTime) {
                showMessage("All rota fields are required.");
                return;
            }

            try {
                await addDoc(collection(db, `/artifacts/${appId}/public/data/rotas`), {
                    home,
                    name,
                    category,
                    date,
                    startTime,
                    endTime,
                    createdAt: new Date()
                });
                showMessage("Rota shift added successfully!");
                document.getElementById('addRotaForm').reset();
            } catch (e) {
                console.error("Error adding rota document:", e);
                showMessage("Error adding rota. Please try again.");
            }
        }

        // New function to handle staff sign-in
        async function handleSignIn(event) {
            event.preventDefault();
            const name = document.getElementById('timesheetName').value;
            const home = document.getElementById('homeSelect').value;
            const signInTime = Timestamp.now();
            const date = new Date().toISOString().split('T')[0];

            if (!home || !name) {
                showMessage("Staff name and home are required for sign-in.");
                return;
            }

            try {
                // Check if the user is already signed in at this home
                const q = query(collection(db, `/artifacts/${appId}/public/data/signins`),
                    where("name", "==", name),
                    where("home", "==", home),
                    where("signOutTime", "==", null));
                const querySnapshot = await getDocs(q);

                if (!querySnapshot.empty) {
                    showMessage("You are already signed in.");
                    return;
                }

                await addDoc(collection(db, `/artifacts/${appId}/public/data/signins`), {
                    name,
                    home,
                    signInTime,
                    date,
                    signOutTime: null
                });
                showMessage("You have been signed in.");
                document.getElementById('timesheetName').disabled = true;
                document.getElementById('signInButton').classList.add('hidden');
                document.getElementById('signOutButtonForm').classList.remove('hidden');

            } catch (e) {
                console.error("Error during sign-in:", e);
                showMessage("Failed to sign in. Please try again.");
            }
        }

        // New function to handle staff sign-out
        async function handleSignOutForm(event) {
            event.preventDefault();
            const name = document.getElementById('timesheetName').value;
            const home = document.getElementById('homeSelect').value;

            try {
                const q = query(collection(db, `/artifacts/${appId}/public/data/signins`),
                    where("name", "==", name),
                    where("home", "==", home),
                    where("signOutTime", "==", null));
                const querySnapshot = await getDocs(q);

                if (querySnapshot.empty) {
                    showMessage("You are not currently signed in.");
                    return;
                }

                const docToUpdate = querySnapshot.docs[0];
                const signInTime = docToUpdate.data().signInTime.toDate();
                const signOutTime = new Date();
                
                const hours = (signOutTime - signInTime) / (1000 * 60 * 60);

                // Update the signin record
                await updateDoc(docToUpdate.ref, {
                    signOutTime: Timestamp.fromDate(signOutTime)
                });

                // Add a new timesheet record
                await addDoc(collection(db, `/artifacts/${appId}/public/data/timesheets`), {
                    home,
                    name,
                    date: signOutTime.toISOString().split('T')[0],
                    startTime: signInTime.toTimeString().slice(0, 5),
                    endTime: signOutTime.toTimeString().slice(0, 5),
                    hours: parseFloat(hours.toFixed(2)),
                    createdAt: new Date()
                });
                showMessage("Timesheet submitted successfully!");
                document.getElementById('timesheetName').disabled = false;
                document.getElementById('signInButton').classList.remove('hidden');
                document.getElementById('signOutButtonForm').classList.add('hidden');

            } catch (e) {
                console.error("Error during sign-out:", e);
                showMessage("Failed to sign out. Please try again.");
            }
        }
        
        // Helper function to calculate hours between two time strings
        function calculateHours(startTime, endTime) {
            const start = new Date(`1970/01/01 ${startTime}`);
            const end = new Date(`1970/01/01 ${endTime}`);
            if (end < start) {
                // Handles shifts that cross midnight
                end.setDate(end.getDate() + 1);
            }
            return (end - start) / (1000 * 60 * 60);
        }

        let allRotas = [];
        let allTimesheets = [];

        function displayRotas(rotas) {
            allRotas = rotas.sort((a, b) => new Date(a.date) - new Date(b.date));
            const rotaList = document.getElementById('rotaList');
            rotaList.innerHTML = '';
            if (allRotas.length === 0) {
                rotaList.innerHTML = '<p class="text-gray-500">No rota shifts planned yet for this home.</p>';
            } else {
                allRotas.forEach(rota => {
                    const li = document.createElement('li');
                    li.className = "p-4 bg-white rounded-lg shadow-sm flex items-center justify-between";
                    li.innerHTML = `
                        <div>
                            <p class="font-semibold text-gray-800">${rota.name}</p>
                            <p class="text-sm text-gray-600">${rota.date} - ${rota.category}</p>
                            <p class="text-xs text-gray-500">${rota.startTime} - ${rota.endTime}</p>
                        </div>
                        <button class="edit-btn p-2 bg-indigo-100 text-indigo-700 rounded-md hover:bg-indigo-200 transition duration-200" data-id="${rota.id}" data-type="rota">Edit</button>
                    `;
                    rotaList.appendChild(li);
                });
            }
            document.querySelectorAll('.edit-btn').forEach(button => {
                button.addEventListener('click', handleEditClick);
            });
        }

        function displayTimesheets(timesheets) {
            allTimesheets = timesheets.sort((a, b) => new Date(a.date) - new Date(b.date));
            const timesheetList = document.getElementById('timesheetList');
            timesheetList.innerHTML = '';
            if (allTimesheets.length === 0) {
                timesheetList.innerHTML = '<p class="text-gray-500">No timesheets submitted yet for this home.</p>';
            } else {
                allTimesheets.forEach(ts => {
                    const li = document.createElement('li');
                    li.className = "p-4 bg-white rounded-lg shadow-sm flex items-center justify-between";
                    li.innerHTML = `
                        <div>
                            <p class="font-semibold text-gray-800">${ts.name}</p>
                            <p class="text-sm text-gray-600">${ts.date}</p>
                            <p class="text-xs text-gray-500">${ts.startTime} - ${ts.endTime} (${ts.hours} hours)</p>
                        </div>
                        <button class="edit-btn p-2 bg-emerald-100 text-emerald-700 rounded-md hover:bg-emerald-200 transition duration-200" data-id="${ts.id}" data-type="timesheet">Edit</button>
                    `;
                    timesheetList.appendChild(li);
                });
            }
            document.querySelectorAll('.edit-btn').forEach(button => {
                button.addEventListener('click', handleEditClick);
            });
        }
        
        let editingDocId = null;
        let editingDocType = null;

        function handleEditClick(event) {
            const button = event.target;
            editingDocId = button.getAttribute('data-id');
            editingDocType = button.getAttribute('data-type');
            
            let data;
            if (editingDocType === 'rota') {
                data = allRotas.find(r => r.id === editingDocId);
            } else {
                data = allTimesheets.find(t => t.id === editingDocId);
            }

            if (data) {
                document.getElementById('editModal').style.display = 'flex';
                document.getElementById('editName').value = data.name;
                document.getElementById('editDate').value = data.date;
                document.getElementById('editStartTime').value = data.startTime;
                document.getElementById('editEndTime').value = data.endTime;
                document.getElementById('editFormTitle').textContent = `Edit ${editingDocType === 'rota' ? 'Rota' : 'Timesheet'} Entry`;
                
                // Show/hide category field based on type
                const editCategoryContainer = document.getElementById('editCategoryContainer');
                if (editingDocType === 'rota') {
                    editCategoryContainer.classList.remove('hidden');
                    document.getElementById('editCategory').value = data.category || '';
                } else {
                    editCategoryContainer.classList.add('hidden');
                }
            }
        }

        async function handleEditFormSubmit(event) {
            event.preventDefault();
            const name = document.getElementById('editName').value;
            const date = document.getElementById('editDate').value;
            const startTime = document.getElementById('editStartTime').value;
            const endTime = document.getElementById('editEndTime').value;
            const home = document.getElementById('homeSelect').value;

            if (!name || !date || !startTime || !endTime) {
                showMessage("All fields are required.");
                return;
            }
            
            const updateData = {
                name,
                date,
                startTime,
                endTime,
                home // Add home to the update data
            };

            if (editingDocType === 'rota') {
                updateData.category = document.getElementById('editCategory').value;
            } else {
                const hours = calculateHours(startTime, endTime);
                if (hours <= 0) {
                    showMessage("End time must be after start time.");
                    return;
                }
                updateData.hours = hours;
            }
            
            try {
                const docRef = doc(db, `/artifacts/${appId}/public/data/${editingDocType}s`, editingDocId);
                await updateDoc(docRef, updateData);
                showMessage("Entry updated successfully!");
                document.getElementById('editModal').style.display = 'none';
            } catch (e) {
                console.error("Error updating document:", e);
                showMessage("Error updating entry. Please try again.");
            }
        }


        function compareData() {
            const filterDate = document.getElementById('filterDate').value;
            
            let rotasToCompare = allRotas;
            let timesheetsToCompare = allTimesheets;

            if (filterDate) {
                rotasToCompare = allRotas.filter(r => r.date === filterDate);
                timesheetsToCompare = allTimesheets.filter(t => t.date === filterDate);
            }

            const comparisonList = document.getElementById('comparisonList');
            comparisonList.innerHTML = '';
            const comparisonResults = [];

            timesheetsToCompare.forEach(ts => {
                const matchingRota = rotasToCompare.find(rota => rota.name === ts.name && rota.date === ts.date && rota.home === ts.home);
                const plannedHours = matchingRota ? calculateHours(matchingRota.startTime, matchingRota.endTime) : 0;
                
                let status = 'Match';
                let message = 'Timesheet hours match rota.';
                if (!matchingRota) {
                    status = 'No Rota';
                    message = 'No rota found for this timesheet.';
                } else if (ts.hours !== plannedHours) {
                    status = 'Discrepancy';
                    message = `Planned: ${plannedHours} hours, Recorded: ${ts.hours} hours.`;
                }

                comparisonResults.push({
                    name: ts.name,
                    date: ts.date,
                    status,
                    message,
                });
            });

            if (comparisonResults.length === 0) {
                 comparisonList.innerHTML = '<p class="text-gray-500">No data to compare.</p>';
            } else {
                 comparisonResults.forEach(result => {
                    let bgColor = '';
                    if (result.status === 'Match') bgColor = 'bg-green-100';
                    if (result.status === 'Discrepancy') bgColor = 'bg-red-100';
                    if (result.status === 'No Rota') bgColor = 'bg-yellow-100';

                    const li = document.createElement('li');
                    li.className = `p-4 rounded-lg shadow-sm flex items-center justify-between ${bgColor}`;
                    li.innerHTML = `
                        <div>
                            <p class="font-semibold text-gray-800">${result.name} - ${result.date}</p>
                            <p class="text-sm text-gray-600">${result.message}</p>
                        </div>
                        <span class="text-xs font-bold px-3 py-1 rounded-full ${result.status === 'Match' ? 'bg-green-500 text-white' : result.status === 'Discrepancy' ? 'bg-red-500 text-white' : 'bg-yellow-500 text-gray-800'}">${result.status}</span>
                    `;
                    comparisonList.appendChild(li);
                });
            }
        }

        // New function to generate staff reports
        function generateStaffReport() {
            const staffHours = {};
            allTimesheets.forEach(ts => {
                staffHours[ts.name] = (staffHours[ts.name] || 0) + ts.hours;
            });

            const reportList = document.getElementById('staffReportList');
            reportList.innerHTML = '';

            const sortedStaff = Object.keys(staffHours).sort((a, b) => staffHours[b] - staffHours[a]);

            if (sortedStaff.length === 0) {
                reportList.innerHTML = '<p class="text-gray-500">No timesheets submitted for a report.</p>';
            } else {
                sortedStaff.forEach(name => {
                    const li = document.createElement('li');
                    li.className = "p-4 bg-white rounded-lg shadow-sm flex items-center justify-between";
                    li.innerHTML = `
                        <p class="font-semibold text-gray-800">${name}</p>
                        <span class="text-sm text-gray-600">${staffHours[name]} hours</span>
                    `;
                    reportList.appendChild(li);
                });
            }
        }
        
        async function addTestData() {
            const rotaData = [
                { home: 'Happy Home', name: 'John Doe', category: 'carer day', date: '2025-09-17', startTime: '08:00', endTime: '16:00' },
                { home: 'Happy Home', name: 'Jane Smith', category: 'nurse day', date: '2025-09-17', startTime: '08:00', endTime: '16:00' },
                { home: 'Happy Home', name: 'John Doe', category: 'carer day', date: '2025-09-18', startTime: '08:00', endTime: '16:00' },
                { home: 'Serene Care', name: 'Jane Smith', category: 'nurse nights', date: '2025-09-17', startTime: '20:00', endTime: '04:00' }, // Shift across midnight
                { home: 'Serene Care', name: 'Mark Wilson', category: 'carer nights', date: '2025-09-18', startTime: '20:00', endTime: '04:00' },
            ];

            const timesheetData = [
                { home: 'Happy Home', name: 'John Doe', date: '2025-09-17', startTime: '08:00', endTime: '16:00' }, // Match
                { home: 'Happy Home', name: 'Jane Smith', date: '2025-09-17', startTime: '08:00', endTime: '16:30' }, // Discrepancy
                { home: 'Happy Home', name: 'John Doe', date: '2025-09-18', startTime: '08:00', endTime: '15:30' }, // Discrepancy
                { home: 'Serene Care', name: 'Peter Jones', date: '2025-09-18', startTime: '09:00', endTime: '17:00' }, // No rota
            ];
            
            try {
                const addRotas = rotaData.map(data => addDoc(collection(db, `/artifacts/${appId}/public/data/rotas`), { ...data, createdAt: new Date() }));
                const addTimesheets = timesheetData.map(data => addDoc(collection(db, `/artifacts/${appId}/public/data/timesheets`), { ...data, hours: calculateHours(data.startTime, data.endTime), createdAt: new Date() }));

                await Promise.all([...addRotas, ...addTimesheets]);
                showMessage("Test data added successfully!");
            } catch (e) {
                console.error("Error adding test data:", e);
                showMessage("Failed to add test data. Please try again.");
            }
        }

    </script>

    <!-- Login Screen -->
    <div id="loginScreen" class="absolute inset-0 flex items-center justify-center p-6 transition-opacity duration-500">
        <div class="bg-white p-8 rounded-xl shadow-lg text-center max-w-sm w-full space-y-6">
            <h2 class="text-3xl font-bold text-gray-800">Staffing App</h2>
            <p class="text-gray-600">Please sign in to continue.</p>
            <button onclick="signInWithMicrosoft()"
                    class="w-full p-3 bg-blue-600 text-white font-semibold rounded-md shadow-md hover:bg-blue-700 transition duration-200">
                Sign in with Microsoft
            </button>
        </div>
    </div>

    <!-- Main Content Grid -->
    <div id="mainContent" class="max-w-7xl mx-auto space-y-8 hidden">
        <header class="text-center flex flex-col md:flex-row justify-between items-center mb-6 space-y-4 md:space-y-0">
            <h1 class="text-4xl font-bold text-gray-900">Staffing App</h1>
            <div class="flex items-center space-x-4">
                 <p id="userIdDisplay" class="text-sm text-gray-500 truncate"></p>
                 <button id="signOutButton"
                         class="p-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition duration-200">
                     Sign Out
                 </button>
            </div>
        </header>

        <main class="grid grid-cols-1 lg:grid-cols-2 gap-8">

            <!-- Left Panel: Forms -->
            <div class="bg-white p-6 rounded-xl shadow-lg space-y-6">

                <!-- Home Selector -->
                <section>
                    <label for="homeSelect" class="block text-sm font-medium text-gray-700">Select a Home</label>
                    <select id="homeSelect" required
                            class="mt-1 block w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition duration-200">
                         <option value="" disabled selected>Select a Home</option>
                         <option value="Happy Home">Happy Home</option>
                         <option value="Serene Care">Serene Care</option>
                    </select>
                </section>
                
                <hr class="border-gray-200">

                <!-- Add Rota Form -->
                <section>
                    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Add Rota Shift</h2>
                    <form id="addRotaForm" class="space-y-4">
                        <input type="text" id="rotaName" placeholder="Staff Name" required
                               class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition duration-200">
                        <select id="rotaCategory" required
                                class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition duration-200">
                             <option value="" disabled selected>Select a Category</option>
                             <option value="carer day">Carer Day</option>
                             <option value="carer nights">Carer Nights</option>
                             <option value="nurse day">Nurse Day</option>
                             <option value="nurse nights">Nurse Nights</option>
                             <option value="team leader day">Team Leader Day</option>
                             <option value="team leader nights">Team Leader Nights</option>
                        </select>
                        <input type="date" id="rotaDate" required
                               class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition duration-200">
                        <div class="flex gap-4">
                            <input type="time" id="rotaStartTime" required
                                   class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition duration-200">
                            <input type="time" id="rotaEndTime" required
                                   class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition duration-200">
                        </div>
                        <button type="submit"
                                class="w-full p-3 bg-indigo-600 text-white font-semibold rounded-md shadow-md hover:bg-indigo-700 transition duration-200">
                            Add Rota
                        </button>
                    </form>
                </section>

                <hr class="border-gray-200">

                <!-- Sign In / Sign Out Section -->
                <section>
                    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Sign In / Out</h2>
                    <form id="signInForm" class="space-y-4">
                        <input type="text" id="timesheetName" placeholder="Your Name" required
                               class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition duration-200">
                        <div class="flex gap-4">
                            <button type="submit" id="signInButton"
                                    class="w-full p-3 bg-emerald-600 text-white font-semibold rounded-md shadow-md hover:bg-emerald-700 transition duration-200">
                                Sign In
                            </button>
                            <button type="button" id="signOutButtonForm"
                                    class="w-full p-3 bg-red-600 text-white font-semibold rounded-md shadow-md hover:bg-red-700 transition duration-200 hidden" onclick="handleSignOutForm(event)">
                                Sign Out
                            </button>
                        </div>
                    </form>
                </section>
                
                <hr class="border-gray-200">
                
                <section>
                    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Populate with Test Data</h2>
                    <p class="text-gray-600 mb-4">Click below to add sample rota and timesheet entries to the app.</p>
                    <button id="addTestDataButton"
                            class="w-full p-3 bg-gray-500 text-white font-semibold rounded-md shadow-md hover:bg-gray-600 transition duration-200">
                        Add Test Data
                    </button>
                </section>
            </div>

            <!-- Right Panel: Data Display -->
            <div class="bg-white p-6 rounded-xl shadow-lg space-y-6">
                <!-- Rota Display Section -->
                <section>
                    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Current Rota</h2>
                    <ul id="rotaList" class="space-y-2">
                        <!-- Rota items will be populated by JavaScript -->
                    </ul>
                </section>

                <hr class="border-gray-200">

                <!-- Timesheets Display Section -->
                <section>
                    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Submitted Timesheets</h2>
                    <ul id="timesheetList" class="space-y-2">
                        <!-- Timesheet items will be populated by JavaScript -->
                    </ul>
                </section>
            </div>
        </main>

        <!-- Comparison Section -->
        <section class="bg-white p-6 rounded-xl shadow-lg">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">Comparison Report</h2>
            <input type="date" id="filterDate" 
                   class="mb-4 w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition duration-200">
            <ul id="comparisonList" class="space-y-4">
                 <!-- Comparison results will be populated by JavaScript -->
            </ul>
        </section>
        
        <hr class="border-gray-200">

        <!-- Staff Report Section -->
        <section class="bg-white p-6 rounded-xl shadow-lg">
            <h2 class="text-2xl font-semibold text-gray-800 mb-4">Staff Hours Report</h2>
            <ul id="staffReportList" class="space-y-2">
                <!-- Staff report will be populated by JavaScript -->
            </ul>
        </section>

    </div>

    <!-- Custom Modal for messages -->
    <div id="messageModal" class="modal">
        <div class="bg-white p-6 rounded-xl shadow-lg max-w-sm w-full text-center">
            <p id="modalMessage" class="font-semibold text-gray-800"></p>
        </div>
    </div>

    <!-- Edit Modal -->
    <div id="editModal" class="modal">
        <div class="bg-white p-6 rounded-xl shadow-lg max-w-lg w-full">
            <h2 id="editFormTitle" class="text-2xl font-semibold text-gray-800 mb-4">Edit Entry</h2>
            <form id="editForm" class="space-y-4">
                <input type="text" id="editName" placeholder="Name" required
                       class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition duration-200">
                <div id="editCategoryContainer" class="hidden">
                    <select id="editCategory" required
                            class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition duration-200">
                         <option value="" disabled selected>Select a Category</option>
                         <option value="carer day">Carer Day</option>
                         <option value="carer nights">Carer Nights</option>
                         <option value="nurse day">Nurse Day</option>
                         <option value="nurse nights">Nurse Nights</option>
                         <option value="team leader day">Team Leader Day</option>
                         <option value="team leader nights">Team Leader Nights</option>
                    </select>
                </div>
                <input type="date" id="editDate" required
                       class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition duration-200">
                <div class="flex gap-4">
                    <input type="time" id="editStartTime" required
                           class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition duration-200">
                    <input type="time" id="editEndTime" required
                           class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 transition duration-200">
                </div>
                <div class="flex gap-4">
                    <button type="submit"
                            class="w-full p-3 bg-indigo-600 text-white font-semibold rounded-md shadow-md hover:bg-indigo-700 transition duration-200">
                        Save Changes
                    </button>
                    <button type="button" id="closeEditModal"
                            class="w-full p-3 bg-gray-300 text-gray-800 font-semibold rounded-md shadow-md hover:bg-gray-400 transition duration-200">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>

</body>
</html>
